<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cs | ]]></title>
  <link href="http://psoshnin.github.io/blog/categories/cs/atom.xml" rel="self"/>
  <link href="http://psoshnin.github.io/"/>
  <updated>2014-01-12T23:26:21-08:00</updated>
  <id>http://psoshnin.github.io/</id>
  <author>
    <name><![CDATA[Polina Soshnin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why I am a Hacker]]></title>
    <link href="http://psoshnin.github.io/blog/2014/01/09/why-i-am-a-hacker/"/>
    <updated>2014-01-09T00:00:00-08:00</updated>
    <id>http://psoshnin.github.io/blog/2014/01/09/why-i-am-a-hacker</id>
    <content type="html"><![CDATA[<p>Included file 'JB/setup' not found in _includes directory</p>

<p>What are hackers like? Why are there so few women hackers?</p>

<p>Hackdom is an abstract, and at first a bit mysterious-seeming gateway to a whole world with an intricate logic of its own.</p>

<p>Hackers build things.</p>

<p>Hackers solve problems and build things, and they believe in freedom and voluntary mutual help.</p>

<p>The world is full of fascinating problems waiting to be solved. Hackers get a thrill from solving problems, sharpening their skills, and exercising their intelligence.</p>

<h3>What hackers believe</h3>

<p>Hackers hold the belief that even though you may not know all of what you need to solve a problem, if you tackle a piece of it and learn from that, you&rsquo;ll learn enough to solve the next piece.</p>

<p>No problem should ever have to be solved twice.</p>

<p>It&rsquo;s a moral duty for you to share information, solve problems, and then give solutions away just so other hackers can solve new problems instead of having to perpetually re-address old ones. Following that line of thought, hackers believe there shouldn&rsquo;t be legal, artificial technical, or institutional barriers to sharing information and solving problems.</p>

<p>It&rsquo;s justified to use your hacking skills to support a family or even to get rich, but you don&rsquo;t forget your loyalty to your art and your fellow hackers while doing it.</p>

<h3>Freedom is good</h3>

<p>Hackers are naturally anti-authoritarian</p>

<p>If you revere competence, you&rsquo;ll enjoy developing it in yourself and the hard work and long hours and dedication will seem worth it.</p>

<p>Hackerdom is culture with no money economy &mdash; I find this interesting</p>

<p>It runs on reputation. You can &ldquo;earn&rdquo; reputation bagdes through sites like StackOverFlow or HackerRank or by just getting known in the community through contributions on GitHub and the like. In doing so you try to solve interesting problems but ego or external validation aren&rsquo;t the goals here. You become respected by hackers by writing open source software that other hackers will think are fun and/or useful. Contributions work the same way: helping test and debug open source software will achieve similar goals. (This will also generate good karma :)</p>

<p>Hackerdom is a gift culture: you don&rsquo;t achieve status and reputation by dominating others, or being superficially beautiful, or making other people jealous. You achieve status by giving away your time, creativity, and skill.</p>

<p>Hackerdom doesn&rsquo;t have charismatic leaders&mdash; instead it has heroes and elders and historians.</p>

<p>How to fit into this culture?
Learn to write very well and understand how to effectively convey ideas. Understand how to exert mental discipline and a relaxed awareness of control &mdash; training in the martial arts is one way of doing this. I think many different types of disciplines can apply here.</p>

<h3>Skills to have</h3>

<p>It&rsquo;s best to learn the hacker five: Python, C/C++, Java, Perl, Lisp. These are the most important hacking languages and they all represent different approached to programming and will educate you in different ways.</p>

<p>Learn C and Lisp (Scheme), then Java. C is very efficient of your machine&rsquo;s resources, but it requires you to do a lot of low-level management of memory by hand. Low level code tends to get complex and error prone. Python uses your machine&rsquo;s time less efficiently, but it uses your time more efficiently.</p>

<p>Perl is worth learning because it&rsquo;s widely used in web pages and sysadmin. A lot of people use Perl to avoid C programming.</p>

<p>Learning to program is like learning to write well in your natural language. The best way to do this is to read stuff written by the masters, write some things yourself, read a lot more, write a little more, until your code starts to look like the masters.</p>

<p>Get open-source Unix/Linux and learn how to use and run it. I feel like if you went the mac route and learned how to use linux/unix commands that would work as well.</p>

<p>Unix&mdash; operating system of the internet. You can&rsquo;t be a hacker without understanding unix.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SF: hackers and hypergentrification]]></title>
    <link href="http://psoshnin.github.io/blog/2014/01/09/san-francisco-hackers-and-hypergentrification/"/>
    <updated>2014-01-09T00:00:00-08:00</updated>
    <id>http://psoshnin.github.io/blog/2014/01/09/san-francisco-hackers-and-hypergentrification</id>
    <content type="html"><![CDATA[<p>Included file 'JB/setup' not found in _includes directory</p>

<p>I think it&rsquo;s interesting that one thing that hackers truly value is living in a society where there is equal access to the share of information. In SF, there is no equal access to opportunities or living arrangements. Facebook, which has a sign on its campus that says &ldquo;The Hacker Company&rdquo; seeks to epitomize this. I find it ironic because it is also a company in the Bay Area that has contributed to the hyper gentrification of San Francisco&rsquo;s neighborhoods. While it seeks to be all inclusive of different ethnic background and gender identities, in doing so it is hyper disclusive to class. The entire campus is very opulent and it would be difficult to be an employee there and not have a sense of entitlement to all the company perks money can buy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[yet another static site generator]]></title>
    <link href="http://psoshnin.github.io/blog/2014/01/09/how-to-build-a-static-site-generator/"/>
    <updated>2014-01-09T00:00:00-08:00</updated>
    <id>http://psoshnin.github.io/blog/2014/01/09/how-to-build-a-static-site-generator</id>
    <content type="html"><![CDATA[<p>Included file 'JB/setup' not found in _includes directory</p>

<p>There are lots of static site generators out there&mdash; 212 of them in fact! See <a href="http://staticsitegenerators.net/.">http://staticsitegenerators.net/.</a></p>

<p>Why go about building your own static site generator?</p>

<p>Well, there were a few things about static site generators that I found really handy:</p>

<p>You can create content in markdown/textile
You can manage everything with git
You can publish directly from the terminal
No database to maintain
No hosting headaches&mdash; host on github
Makes your code completely open source&mdash; yay!
They can turn your site into an open source project
High performance: static HTML pages can be immediately served by web server because there is no database requests or other overhead.
No special software needs to be installed, and the processing/memory requirements are low
SSG allow you to follow whatever workflow you like
Any input format that can be transformed to HTML can be used
Use the version control system of your choice
The use of SSG makes the creation of your website into a process akin to software development&mdash; any budding swe will think that&rsquo;s awesome</p>

<p>As a budding hacker, one way you can learn is by taking things apart and then putting them back together. That is what I will strive to do with Jekyll-Bootsrap.</p>

<p>Jekyll-Bootstrap is the static site generator that I am using to power this blog. It provides a full blog scaffold for Jekyll based blogs. That means I will have ot peer into Jekyll to see what&rsquo;s going on and see if I can recreate my own, customized version of a static site generator.</p>

<p>Another reason I wanted to do this project was that I wanted to explore another way to build a website. There are many ways to go about building a website. You can write HTML manually, use a framework to create dynamic web sites (see my post on web frameworks), or use a full fledged content management system (CMS) that offers an interface to create, edit, review, and publish your content. The Wellesley College website currently uses Drupal as its CMS.</p>

<p>You can also use tools to generate static (instead of a dynamic) website.</p>

<p>What the SSG will do:</p>

<p>Once you have written some input files and created a layout along with rules to specify how files should be compiled, the site generator will do the rest for you. The compiler will take every changed item and produce output by running your specified transformations on the input. It can also be configured to deploy the site for you (heroku, github pages, what have you). An SSG also allows you to run checks on your output&mdash; it can validate the CSS, HTML, find stale files, and find broken links. You can add further checks with a few lines of code.</p>

<p>Goal: the time of routinely writing HTML by hand is OVER. On to the static site generators! It&rsquo;s so much nicer to just write your content in Markdown and let the SSG do the rest for you.</p>

<p>This article still in progress.</p>

<p>Take a look at this for now: <a href="https://github.com/skx/static-site-generators">https://github.com/skx/static-site-generators</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[coffee and code: building my first commericial website]]></title>
    <link href="http://psoshnin.github.io/blog/2014/01/09/coffee-and-code-my-first-commericial-website/"/>
    <updated>2014-01-09T00:00:00-08:00</updated>
    <id>http://psoshnin.github.io/blog/2014/01/09/coffee-and-code-my-first-commericial-website</id>
    <content type="html"><![CDATA[<p>Included file 'JB/setup' not found in _includes directory</p>

<p>A post in which I put my rails tutorials to use and build a website for my aunt and uncle&rsquo;s boutique roastery in Walla Walla, WA.</p>

<p>I will use this post to talk about what went in to making the website.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile 1/3: building a W8 app]]></title>
    <link href="http://psoshnin.github.io/blog/2014/01/09/building-a-w8-app/"/>
    <updated>2014-01-09T00:00:00-08:00</updated>
    <id>http://psoshnin.github.io/blog/2014/01/09/building-a-w8-app</id>
    <content type="html"><![CDATA[<p>Included file 'JB/setup' not found in _includes directory</p>

<p>A three part series in which I talk about my experience developing in the three mobile ecosystems: iOS, Android, and W8.</p>

<p>One huge problem with Client-Side systems going into 2014 is that to reach all users, your app must be built three times: in Android (Java), iOS (ObjC), and Windows 8(C#).</p>

<p>Since I will probably have to come across these three ecosystems at one point in my career, I figured I&rsquo;d give all of them a go.</p>

<p>This is a post in which I talk about my experience making W8 apps and why I will probably never want to do it in real life.</p>
]]></content>
  </entry>
  
</feed>
