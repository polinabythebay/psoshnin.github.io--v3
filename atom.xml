<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[]]></title>
  <link href="http://psoshnin.github.io/atom.xml" rel="self"/>
  <link href="http://psoshnin.github.io/"/>
  <updated>2014-01-13T00:05:15-08:00</updated>
  <id>http://psoshnin.github.io/</id>
  <author>
    <name><![CDATA[Polina Soshnin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[title1]]></title>
    <link href="http://psoshnin.github.io/blog/2014/01/12/title1/"/>
    <updated>2014-01-12T19:01:27-08:00</updated>
    <id>http://psoshnin.github.io/blog/2014/01/12/title1</id>
    <content type="html"><![CDATA[<p>Why hello, omg it didn&rsquo;t save at all, bastards.</p>

<figure class='code'><figcaption><span>Coffeescript Tricks start:51 mark:52,54-55</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># Given an alphabet:</span>
</span><span class='line'><span class="nv">alphabet = </span><span class="s">&#39;abcdefghijklmnopqrstuvwxyz&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Iterate over part of the alphabet:</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">letter</span> <span class="k">for</span> <span class="nx">letter</span> <span class="k">in</span> <span class="nx">alphabet</span><span class="p">[</span><span class="mi">4</span><span class="p">..</span><span class="mi">8</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[title]]></title>
    <link href="http://psoshnin.github.io/blog/2014/01/12/title/"/>
    <updated>2014-01-12T19:01:11-08:00</updated>
    <id>http://psoshnin.github.io/blog/2014/01/12/title</id>
    <content type="html"><![CDATA[<p>Hello, I added lots of stuffs.</p>

<figure class='code'><figcaption><span>Discover if a number is prime</span><a href='http://www.noulakaz.net/weblog/2007/03/18/a-regular-expression-to-check-for-prime-numbers/'>Source Article</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Fixnum</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">prime?</span>
</span><span class='line'>    <span class="p">(</span><span class="s1">&#39;1&#39;</span> <span class="o">*</span> <span class="nb">self</span><span class="p">)</span> <span class="o">!~</span> <span class="sr">/^1?$|^(11+?)\1+$/</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Ruby and Rails]]></title>
    <link href="http://psoshnin.github.io/blog/2014/01/10/installing-ruby-and-rails/"/>
    <updated>2014-01-10T00:00:00-08:00</updated>
    <id>http://psoshnin.github.io/blog/2014/01/10/installing-ruby-and-rails</id>
    <content type="html"><![CDATA[<p>Included file &lsquo;JB/setup&rsquo; not found in _includes directory</p>

<p>I was told that setting up my development environment for writing Rails apps was going to be one of the trickiest parts of my entire learning experience, and they were right. The process was convoluted enough that I&rsquo;m making a post out of it to use as a means for documenting the process should I need to redo it in the future.</p>

<p>The best list of instructions for installing the latest version of Rails (4.1) and Ruby (2.0) for Mac 10.9 Mavericks can be found <a href="http://railsapps.github.io/installing-rails.html">here</a>.</p>

<p>However, what Daniel failed to mention in his installation guide was that you <em>will</em> need to also install previous versions of Ruby (1.9.3) and Rails (3.2) in order to successfully complete some of his tutorials. It&rsquo;s also a good exercise in managing different versions of Ruby and Rails for different projects and understanding how RVM works.</p>

<p>So here&rsquo;s what you need to set up your Rails environment. I&rsquo;m going to assume you are using Mac OSX 10.9 Mavericks.</p>

<ul>
<li><h5>Xcode</h5>

<p>This is Apple&rsquo;s development environment. You would use this if you were creating apps for iOS or Mac. Xcode includes a few system libraries that you need for Rails development.</p></li>
<li><h5>Homebrew</h5>

<p>Homebrew is a package enviroment for OSX that is really good to have in general when installing packages. It will install most missing system packages that you&rsquo;ll need for Rails.</p></li>
<li><h5>RVM (Ruby Version Manager)</h5>

<p>If you&rsquo;re serious about learning Rails development, you will install RVM. It lets you manage different versions of Ruby, Rails, and Gems so you can try out new versions and use different production environments for different applications without having to install/reinstall everything.</p></li>
</ul>


<h5>Install XCode</h5>

<ul>
<li>Click and install XCode from the Mac Store (this is large&mdash; it could take awhile)</li>
<li>Once installed, go to Preferences &ndash;> Downloads &ndash;> Install Command line tools</li>
</ul>


<h5>Install Homebrew and apple-gcc42</h5>

<p>This will install the Homebrew package manager and a GCC compiler.</p>

<h5>Exploring RVM</h5>

<p>This is the structure of RVM. If you type <em>rvm list</em> into your terminal it will show you a list of available Ruby versions:</p>

<pre><code>$ rvm list
rvm rubies

=&gt; ruby-1.9.3-p484 [ x86_64 ]
   ruby-2.0.0-p353 [ x86_64 ]
 * ruby-2.1.0 [ x86_64 ]

# =&gt; - current
# =* - current &amp;&amp; default
#  * - default
</code></pre>

<p>If you want to switch between differeny versions of Ruby, type in <em>rvm use 2.0.0</em>:</p>

<pre><code>$ rvm use 2.0.0
Using /Users/psoshnin/.rvm/gems/ruby-2.0.0-p353
</code></pre>

<p>Type in <em>rvm list</em> to see you&rsquo;ve switched branches:</p>

<pre><code>$ rvm list
rvm rubies

   ruby-1.9.3-p484 [ x86_64 ]
=&gt; ruby-2.0.0-p353 [ x86_64 ]
 * ruby-2.1.0 [ x86_64 ]

# =&gt; - current
# =* - current &amp;&amp; default
#  * - default
</code></pre>

<p>In addition to having different versions of Ruby you will also have different gemsets associated with your current Ruby version. Type in <em>rvm gemset list</em> to view a list of available gemsets for Ruby 2.0.0.</p>

<pre><code>$ rvm gemset list
gemsets for ruby-2.0.0-p353 (found in /Users/psoshnin/.rvm/gems/ruby-2.0.0-p353)
=&gt;  (default)
    global
    rails-bootstrap
</code></pre>

<p>The arrow shows that my default gemset is active. You can see I&rsquo;ve created a <em>rails-bootstrap</em> gemset for a specific project. Use the command <em>rvm gemset use global</em> and <em>rvm gemset use default</em> to switch between gemsets.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I am a Hacker]]></title>
    <link href="http://psoshnin.github.io/blog/2014/01/09/why-i-am-a-hacker/"/>
    <updated>2014-01-09T00:00:00-08:00</updated>
    <id>http://psoshnin.github.io/blog/2014/01/09/why-i-am-a-hacker</id>
    <content type="html"><![CDATA[<p>Included file &lsquo;JB/setup&rsquo; not found in _includes directory</p>

<p>What are hackers like? Why are there so few women hackers?</p>

<p>Hackdom is an abstract, and at first a bit mysterious-seeming gateway to a whole world with an intricate logic of its own.</p>

<p>Hackers build things.</p>

<p>Hackers solve problems and build things, and they believe in freedom and voluntary mutual help.</p>

<p>The world is full of fascinating problems waiting to be solved. Hackers get a thrill from solving problems, sharpening their skills, and exercising their intelligence.</p>

<h3>What hackers believe</h3>

<p>Hackers hold the belief that even though you may not know all of what you need to solve a problem, if you tackle a piece of it and learn from that, you&rsquo;ll learn enough to solve the next piece.</p>

<p>No problem should ever have to be solved twice.</p>

<p>It&rsquo;s a moral duty for you to share information, solve problems, and then give solutions away just so other hackers can solve new problems instead of having to perpetually re-address old ones. Following that line of thought, hackers believe there shouldn&rsquo;t be legal, artificial technical, or institutional barriers to sharing information and solving problems.</p>

<p>It&rsquo;s justified to use your hacking skills to support a family or even to get rich, but you don&rsquo;t forget your loyalty to your art and your fellow hackers while doing it.</p>

<h3>Freedom is good</h3>

<p>Hackers are naturally anti-authoritarian</p>

<p>If you revere competence, you&rsquo;ll enjoy developing it in yourself and the hard work and long hours and dedication will seem worth it.</p>

<p>Hackerdom is culture with no money economy &mdash; I find this interesting</p>

<p>It runs on reputation. You can &ldquo;earn&rdquo; reputation bagdes through sites like StackOverFlow or HackerRank or by just getting known in the community through contributions on GitHub and the like. In doing so you try to solve interesting problems but ego or external validation aren&rsquo;t the goals here. You become respected by hackers by writing open source software that other hackers will think are fun and/or useful. Contributions work the same way: helping test and debug open source software will achieve similar goals. (This will also generate good karma :)</p>

<p>Hackerdom is a gift culture: you don&rsquo;t achieve status and reputation by dominating others, or being superficially beautiful, or making other people jealous. You achieve status by giving away your time, creativity, and skill.</p>

<p>Hackerdom doesn&rsquo;t have charismatic leaders&mdash; instead it has heroes and elders and historians.</p>

<p>How to fit into this culture?
Learn to write very well and understand how to effectively convey ideas. Understand how to exert mental discipline and a relaxed awareness of control &mdash; training in the martial arts is one way of doing this. I think many different types of disciplines can apply here.</p>

<h3>Skills to have</h3>

<p>It&rsquo;s best to learn the hacker five: Python, C/C++, Java, Perl, Lisp. These are the most important hacking languages and they all represent different approached to programming and will educate you in different ways.</p>

<p>Learn C and Lisp (Scheme), then Java. C is very efficient of your machine&rsquo;s resources, but it requires you to do a lot of low-level management of memory by hand. Low level code tends to get complex and error prone. Python uses your machine&rsquo;s time less efficiently, but it uses your time more efficiently.</p>

<p>Perl is worth learning because it&rsquo;s widely used in web pages and sysadmin. A lot of people use Perl to avoid C programming.</p>

<p>Learning to program is like learning to write well in your natural language. The best way to do this is to read stuff written by the masters, write some things yourself, read a lot more, write a little more, until your code starts to look like the masters.</p>

<p>Get open-source Unix/Linux and learn how to use and run it. I feel like if you went the mac route and learned how to use linux/unix commands that would work as well.</p>

<p>Unix&mdash; operating system of the internet. You can&rsquo;t be a hacker without understanding unix.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WC Hour of Code]]></title>
    <link href="http://psoshnin.github.io/blog/2014/01/09/wc-hour-of-code/"/>
    <updated>2014-01-09T00:00:00-08:00</updated>
    <id>http://psoshnin.github.io/blog/2014/01/09/wc-hour-of-code</id>
    <content type="html"><![CDATA[<p>Included file &lsquo;JB/setup&rsquo; not found in _includes directory</p>

<p>A post in which I talk about what it was like to organize Wellesley&rsquo;s first Hour of Code, what tutorials were really awesome, and where to go from there.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[unleashing the twitter bot]]></title>
    <link href="http://psoshnin.github.io/blog/2014/01/09/unleashing-the-twitter-bot/"/>
    <updated>2014-01-09T00:00:00-08:00</updated>
    <id>http://psoshnin.github.io/blog/2014/01/09/unleashing-the-twitter-bot</id>
    <content type="html"><![CDATA[<p>Included file &lsquo;JB/setup&rsquo; not found in _includes directory</p>

<p>A post in which I talk about making twitter bots and my experience making a twitter bot and what kind of fun you can have with twitter bots.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[the league of extraordinary young women]]></title>
    <link href="http://psoshnin.github.io/blog/2014/01/09/the-league-of-extraordinary-young-women/"/>
    <updated>2014-01-09T00:00:00-08:00</updated>
    <id>http://psoshnin.github.io/blog/2014/01/09/the-league-of-extraordinary-young-women</id>
    <content type="html"><![CDATA[<p>Included file &lsquo;JB/setup&rsquo; not found in _includes directory</p>

<p>Use this to keep a running tab of mentors in the field and resources for young women:</p>

<p>I recently read an article that said &ldquo;When women think of mentors, they think of &rdquo;</p>

<p>Compile a list of known resources for women in cs.</p>

<p>First, a list of hackers to know:</p>

<p>Peter Norvig, one of Google&rsquo;s top hackers, co-author of a widely used textbook in AI.</p>

<p>Paul Graham, founder of Y Combinator, writes really great essays.</p>

<p>Jeff Atwood, founder of stack overflow.</p>

<p>The list goes on&hellip;</p>

<p>Now, list of female hackers to know:</p>

<p>(will get to this list eventually)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SF: hackers and hypergentrification]]></title>
    <link href="http://psoshnin.github.io/blog/2014/01/09/san-francisco-hackers-and-hypergentrification/"/>
    <updated>2014-01-09T00:00:00-08:00</updated>
    <id>http://psoshnin.github.io/blog/2014/01/09/san-francisco-hackers-and-hypergentrification</id>
    <content type="html"><![CDATA[<p>Included file &lsquo;JB/setup&rsquo; not found in _includes directory</p>

<p>I think it&rsquo;s interesting that one thing that hackers truly value is living in a society where there is equal access to the share of information. In SF, there is no equal access to opportunities or living arrangements. Facebook, which has a sign on its campus that says &ldquo;The Hacker Company&rdquo; seeks to epitomize this. I find it ironic because it is also a company in the Bay Area that has contributed to the hyper gentrification of San Francisco&rsquo;s neighborhoods. While it seeks to be all inclusive of different ethnic background and gender identities, in doing so it is hyper disclusive to class. The entire campus is very opulent and it would be difficult to be an employee there and not have a sense of entitlement to all the company perks money can buy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QuestBridge   the tl;dr]]></title>
    <link href="http://psoshnin.github.io/blog/2014/01/09/questbridge---the-tldr/"/>
    <updated>2014-01-09T00:00:00-08:00</updated>
    <id>http://psoshnin.github.io/blog/2014/01/09/questbridge&#8212;the-tldr</id>
    <content type="html"><![CDATA[<p>Included file &lsquo;JB/setup&rsquo; not found in _includes directory</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[playing framework roulette]]></title>
    <link href="http://psoshnin.github.io/blog/2014/01/09/playing-framework-roulette/"/>
    <updated>2014-01-09T00:00:00-08:00</updated>
    <id>http://psoshnin.github.io/blog/2014/01/09/playing-framework-roulette</id>
    <content type="html"><![CDATA[<p>Included file &lsquo;JB/setup&rsquo; not found in _includes directory</p>

<p>Client-side frameworks are the way to build rich web apps</p>

<h3>The lowdown on JavaScript Frameworks/Libraries:</h3>

<p>What all of the frameworks agree on:</p>

<p>Serious JS apps require proper data models and ability to do client side rendering, not just server rendering + Ajax/jQuery code</p>

<p>All use the model-view-* separation. There’s some kind of controller piece, but it can depend on the framework.</p>

<p>Data binding = Good
All frameworks except Backbone and Spine have built in declarative data binding in their views</p>

<p>Every single framework is MIT licensed and hosted on GitHub</p>

<p>JS Library vs Framework
Library: can put in your existing architecture and add specific functionality
Framework: give you an architecture (a file structure) that you are meant to follow and are meant to handle common requirements</p>

<p>Libraries don’t make your architecture so deeply tied to the project — they’re typically easier to learn, adopt, customize, and minimize project risk.
Frameworks is a more ambitious take on advancing the craft of JS
Ember JS — creator is also from Rails and SproutCore</p>

<p>Libraries: Backbone, Knockout, Spine, CanJS
Frameworks: Ember, AngularJS, Batman, Meteor</p>

<p>more side by side comparisons here:
<a href="http://blog.stevensanderson.com/2012/08/01/rich-javascript-applications-the-seven-frameworks-throne-of-js-2012/">http://blog.stevensanderson.com/2012/08/01/rich-javascript-applications-the-seven-frameworks-throne-of-js-2012/</a></p>

<p>All of them must make decisions on how to deal with Views, URL Routing, and Data Storage
If one of them is not built in, argument is that it’s easier to work with 3rd party libraries
If one of them is built in, argument is that integration is more seamless.</p>

<p>Ember (like Rails): We do a lot of magic, but it’s good magic.</p>

<p>String-based vs DOM-based templates</p>

<p>AngularJS — made by guys at Google</p>

<p>String-based templates: use Handlebars.js
DOM-based means more control flow via bindings in your markup and not relying on an external templating library</p>

<p>Server-agnosticism
Batman is designed for Rails
Meteor does its own thing</p>

<p>The architecture, convention, and tooling in Ember leans towards Rails developers</p>

<p>Quick overview of the different JS technologies:</p>

<p>Backbone
M-V in JS
Most minimal, best known, easy to adopt</p>

<p>Spine
Modified version of Backbone</p>

<p>Meteor
Bleeding edge future web framework
Very radical
Server-side runtime (Node+Mongo) with client-side runtime. WebSockets syncs between client and server.
Node.js is a framework for server side applications
Mongo is a leading NoSQL open source database
Live deployments each time you edit your code.
Client-side runtimes updated on the fly without losing their state
Beyond conventional web development
Full DB API on the client side—> makes it easier to make dynamic websites
Don’t have to deal with callbacks anymore
An Ecosystem of packages</p>

<p>Internet has latency—> it can take awhile for your DB to update your screen</p>

<p>Ember
Built by guys from jQuery and Rails
What you need to build an “ambitious” web application
Biggest FM in terms of functionality and code size
Very sophisticated, very opinionated
Design inspired by Rails and Cocoa
Will supply project templates for Rails</p>

<p>Sites using this: NPR</p>

<p>AngularJS
Developed by Google, internally used by them
No impact on your server architecture or file layout</p>

<pre><code> Doesn’t need to control the whole page: can work on a section of your page
</code></pre>

<p>Combination of what browsers do today and what they will do natively in a few years</p>

<pre><code> Declarative binding and observability —&gt; in a few years
</code></pre>

<p>Knockout
Model-View-ViewModel
Focused on rich UIs
Not opinionated on URL routing or data access
Won’t impact server architecture or file layout
Doesn’t need to control the whole page</p>

<p>Batman
For people who use Rails and CoffeeScript
Very opinionated, MUST follow conventions
Full-stack framework with pretty rich models, views, controllers, and routing
DOM-based templating</p>

<p>CanJS
Not very well known</p>

<h3>Non-JS Frameworks</h3>

<p>Ahhh there are so many of them! Play? Sinatra? Ruby on Rails? What to learn?</p>

<h3>What to use?</h3>

<p>Which one to choose?
Scope: Are you starting from scratch and want a pre-prepared architecture to guide you?
Or do you prefer to pick your own combinations of patterns and libraries?
Design aesthetic: Do you like doing it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[yet another static site generator]]></title>
    <link href="http://psoshnin.github.io/blog/2014/01/09/how-to-build-a-static-site-generator/"/>
    <updated>2014-01-09T00:00:00-08:00</updated>
    <id>http://psoshnin.github.io/blog/2014/01/09/how-to-build-a-static-site-generator</id>
    <content type="html"><![CDATA[<p>Included file &lsquo;JB/setup&rsquo; not found in _includes directory</p>

<p>There are lots of static site generators out there&mdash; 212 of them in fact! See <a href="http://staticsitegenerators.net/.">http://staticsitegenerators.net/.</a></p>

<p>Why go about building your own static site generator?</p>

<p>Well, there were a few things about static site generators that I found really handy:</p>

<p>You can create content in markdown/textile
You can manage everything with git
You can publish directly from the terminal
No database to maintain
No hosting headaches&mdash; host on github
Makes your code completely open source&mdash; yay!
They can turn your site into an open source project
High performance: static HTML pages can be immediately served by web server because there is no database requests or other overhead.
No special software needs to be installed, and the processing/memory requirements are low
SSG allow you to follow whatever workflow you like
Any input format that can be transformed to HTML can be used
Use the version control system of your choice
The use of SSG makes the creation of your website into a process akin to software development&mdash; any budding swe will think that&rsquo;s awesome</p>

<p>As a budding hacker, one way you can learn is by taking things apart and then putting them back together. That is what I will strive to do with Jekyll-Bootsrap.</p>

<p>Jekyll-Bootstrap is the static site generator that I am using to power this blog. It provides a full blog scaffold for Jekyll based blogs. That means I will have ot peer into Jekyll to see what&rsquo;s going on and see if I can recreate my own, customized version of a static site generator.</p>

<p>Another reason I wanted to do this project was that I wanted to explore another way to build a website. There are many ways to go about building a website. You can write HTML manually, use a framework to create dynamic web sites (see my post on web frameworks), or use a full fledged content management system (CMS) that offers an interface to create, edit, review, and publish your content. The Wellesley College website currently uses Drupal as its CMS.</p>

<p>You can also use tools to generate static (instead of a dynamic) website.</p>

<p>What the SSG will do:</p>

<p>Once you have written some input files and created a layout along with rules to specify how files should be compiled, the site generator will do the rest for you. The compiler will take every changed item and produce output by running your specified transformations on the input. It can also be configured to deploy the site for you (heroku, github pages, what have you). An SSG also allows you to run checks on your output&mdash; it can validate the CSS, HTML, find stale files, and find broken links. You can add further checks with a few lines of code.</p>

<p>Goal: the time of routinely writing HTML by hand is OVER. On to the static site generators! It&rsquo;s so much nicer to just write your content in Markdown and let the SSG do the rest for you.</p>

<p>This article still in progress.</p>

<p>Take a look at this for now: <a href="https://github.com/skx/static-site-generators">https://github.com/skx/static-site-generators</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[coffee and code: building my first commericial website]]></title>
    <link href="http://psoshnin.github.io/blog/2014/01/09/coffee-and-code-my-first-commericial-website/"/>
    <updated>2014-01-09T00:00:00-08:00</updated>
    <id>http://psoshnin.github.io/blog/2014/01/09/coffee-and-code-my-first-commericial-website</id>
    <content type="html"><![CDATA[<p>Included file &lsquo;JB/setup&rsquo; not found in _includes directory</p>

<p>A post in which I put my rails tutorials to use and build a website for my aunt and uncle&rsquo;s boutique roastery in Walla Walla, WA.</p>

<p>I will use this post to talk about what went in to making the website.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile 3/3: building an iOS app]]></title>
    <link href="http://psoshnin.github.io/blog/2014/01/09/building-an-ios-app/"/>
    <updated>2014-01-09T00:00:00-08:00</updated>
    <id>http://psoshnin.github.io/blog/2014/01/09/building-an-ios-app</id>
    <content type="html"><![CDATA[<p>Included file &lsquo;JB/setup&rsquo; not found in _includes directory</p>

<p>Did I save the best for last?</p>

<p>The third part in a three part series in which I talk about my experience developing in the three mobile ecosystems: iOS, Android, and W8.</p>

<p>This is the post in which I will talk about building an ios app.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile 2/3: building an android app]]></title>
    <link href="http://psoshnin.github.io/blog/2014/01/09/building-an-android-app/"/>
    <updated>2014-01-09T00:00:00-08:00</updated>
    <id>http://psoshnin.github.io/blog/2014/01/09/building-an-android-app</id>
    <content type="html"><![CDATA[<p>Included file &lsquo;JB/setup&rsquo; not found in _includes directory</p>

<p>The second part in a three part series in which I talk about my experience developing in the three mobile ecosystems: iOS, Android, and W8.</p>

<p>This is the post in which I will talk about building an android app.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile 1/3: building a W8 app]]></title>
    <link href="http://psoshnin.github.io/blog/2014/01/09/building-a-w8-app/"/>
    <updated>2014-01-09T00:00:00-08:00</updated>
    <id>http://psoshnin.github.io/blog/2014/01/09/building-a-w8-app</id>
    <content type="html"><![CDATA[<p>Included file &lsquo;JB/setup&rsquo; not found in _includes directory</p>

<p>A three part series in which I talk about my experience developing in the three mobile ecosystems: iOS, Android, and W8.</p>

<p>One huge problem with Client-Side systems going into 2014 is that to reach all users, your app must be built three times: in Android (Java), iOS (ObjC), and Windows 8(C#).</p>

<p>Since I will probably have to come across these three ecosystems at one point in my career, I figured I&rsquo;d give all of them a go.</p>

<p>This is a post in which I talk about my experience making W8 apps and why I will probably never want to do it in real life.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why hello world]]></title>
    <link href="http://psoshnin.github.io/blog/2014/01/07/why-hello-world/"/>
    <updated>2014-01-07T00:00:00-08:00</updated>
    <id>http://psoshnin.github.io/blog/2014/01/07/why-hello-world</id>
    <content type="html"><![CDATA[<p>Included file &lsquo;JB/setup&rsquo; not found in _includes directory</p>

<p>Here is a ruby snippet, it&rsquo;s kinda cute:</p>

<div>
  <pre><code class='ruby'>def show
  @widget = Widget(params[:id])
  respond_to do |format|
    format.html # show.html.erb
    format.json { render json: @widget }
  end
end</code></pre>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tywin Lannister Quote]]></title>
    <link href="http://psoshnin.github.io/blog/2013/06/15/tywin-lannister-quote/"/>
    <updated>2013-06-15T09:28:00-07:00</updated>
    <id>http://psoshnin.github.io/blog/2013/06/15/tywin-lannister-quote</id>
    <content type="html"><![CDATA[<p>A nice quote by Tywin Lannister taken from <em>A Storm of Sword</em> book.</p>

<blockquote><p>The greatest fools are ofttimes more clever then the men who laugh at them.</p><footer><strong>Tywin Lannister</strong> <cite>A Storm of Swords</cite></footer></blockquote>

]]></content>
  </entry>
  
</feed>
