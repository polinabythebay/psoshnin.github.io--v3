<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[polina on rails]]></title>
  <link href="http://psoshnin.github.io/atom.xml" rel="self"/>
  <link href="http://psoshnin.github.io/"/>
  <updated>2014-05-20T23:35:09-04:00</updated>
  <id>http://psoshnin.github.io/</id>
  <author>
    <name><![CDATA[Polina Soshnin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[stylesheet page]]]></title>
    <link href="http://psoshnin.github.io/blog/2014/05/20/stylesheet-page/"/>
    <updated>2014-05-20T23:29:56-04:00</updated>
    <id>http://psoshnin.github.io/blog/2014/05/20/stylesheet-page</id>
    <content type="html"><![CDATA[<p>Inserting an image</p>

<p><img src="http://placekitten.com/890/280"></p>

<blockquote><p>Flying is learning how to throw yourself at the ground and miss.</p><footer><strong>Douglas Adams</strong> <cite>The Hichhikers Guide to the Galaxy</cite></footer></blockquote>




<blockquote><p>Every interaction is both precious and an opportunity to delight.</p><footer><strong>Seth Godin</strong> <cite><a href='http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html'>Welcome to Island Marketing</a></cite></footer></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On being a female hacker]]></title>
    <link href="http://psoshnin.github.io/blog/2014/05/12/polina-on-rails-on-being-a-female-hacker/"/>
    <updated>2014-05-12T23:15:37-04:00</updated>
    <id>http://psoshnin.github.io/blog/2014/05/12/polina-on-rails-on-being-a-female-hacker</id>
    <content type="html"><![CDATA[<p>What are hackers like? Why are there so few women hackers?</p>

<p>Hackdom is an abstract, and at first a bit mysterious-seeming gateway to a whole world with an intricate logic of its own.</p>

<p>Hackers build things.</p>

<p>Hackers solve problems and build things, and they believe in freedom and voluntary mutual help.</p>

<p>The world is full of fascinating problems waiting to be solved. Hackers get a thrill from solving problems, sharpening their skills, and exercising their intelligence.</p>

<h3>What hackers believe</h3>

<p>Hackers hold the belief that even though you may not know all of what you need to solve a problem, if you tackle a piece of it and learn from that, you&rsquo;ll learn enough to solve the next piece.</p>

<p>No problem should ever have to be solved twice.</p>

<p>It&rsquo;s a moral duty for you to share information, solve problems, and then give solutions away just so other hackers can solve new problems instead of having to perpetually re-address old ones. Following that line of thought, hackers believe there shouldn&rsquo;t be legal, artificial technical, or institutional barriers to sharing information and solving problems.</p>

<p>It&rsquo;s justified to use your hacking skills to support a family or even to get rich, but you don&rsquo;t forget your loyalty to your art and your fellow hackers while doing it.</p>

<h3>Freedom is good</h3>

<p>Hackers are naturally anti-authoritarian</p>

<p>If you revere competence, you&rsquo;ll enjoy developing it in yourself and the hard work and long hours and dedication will seem worth it.</p>

<p>Hackerdom is culture with no money economy &mdash; I find this interesting</p>

<p>It runs on reputation. You can &ldquo;earn&rdquo; reputation bagdes through sites like StackOverFlow or HackerRank or by just getting known in the community through contributions on GitHub and the like. In doing so you try to solve interesting problems but ego or external validation aren&rsquo;t the goals here. You become respected by hackers by writing open source software that other hackers will think are fun and/or useful. Contributions work the same way: helping test and debug open source software will achieve similar goals. (This will also generate good karma :)</p>

<p>Hackerdom is a gift culture: you don&rsquo;t achieve status and reputation by dominating others, or being superficially beautiful, or making other people jealous. You achieve status by giving away your time, creativity, and skill.</p>

<p>Hackerdom doesn&rsquo;t have charismatic leaders&mdash; instead it has heroes and elders and historians.</p>

<p>How to fit into this culture?
Learn to write very well and understand how to effectively convey ideas. Understand how to exert mental discipline and a relaxed awareness of control &mdash; training in the martial arts is one way of doing this. I think many different types of disciplines can apply here.</p>

<h3>Skills to have</h3>

<p>It&rsquo;s best to learn the hacker five: Python, C/C++, Java, Perl, Lisp. These are the most important hacking languages and they all represent different approached to programming and will educate you in different ways.</p>

<p>Learn C and Lisp (Scheme), then Java. C is very efficient of your machine&rsquo;s resources, but it requires you to do a lot of low-level management of memory by hand. Low level code tends to get complex and error prone. Python uses your machine&rsquo;s time less efficiently, but it uses your time more efficiently.</p>

<p>Perl is worth learning because it&rsquo;s widely used in web pages and sysadmin. A lot of people use Perl to avoid C programming.</p>

<p>Learning to program is like learning to write well in your natural language. The best way to do this is to read stuff written by the masters, write some things yourself, read a lot more, write a little more, until your code starts to look like the masters.</p>

<p>Get open-source Unix/Linux and learn how to use and run it. I feel like if you went the mac route and learned how to use linux/unix commands that would work as well.</p>

<p>Unix&mdash; operating system of the internet. You can&rsquo;t be a hacker without understanding unix.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Static site generators]]></title>
    <link href="http://psoshnin.github.io/blog/2014/05/07/polina-on-rails-static-site-generators/"/>
    <updated>2014-05-07T23:09:27-04:00</updated>
    <id>http://psoshnin.github.io/blog/2014/05/07/polina-on-rails-static-site-generators</id>
    <content type="html"><![CDATA[<p>There are lots of static site generators out there&mdash; 212 of them in fact! See <a href="http://staticsitegenerators.net/.">http://staticsitegenerators.net/.</a></p>

<p>Why go about building your own static site generator?</p>

<p>Well, there were a few things about static site generators that I found really handy:</p>

<p>You can create content in markdown/textile
You can manage everything with git
You can publish directly from the terminal
No database to maintain
No hosting headaches&mdash; host on github
Makes your code completely open source&mdash; yay!
They can turn your site into an open source project
High performance: static HTML pages can be immediately served by web server because there is no database requests or other overhead.
No special software needs to be installed, and the processing/memory requirements are low
SSG allow you to follow whatever workflow you like
Any input format that can be transformed to HTML can be used
Use the version control system of your choice
The use of SSG makes the creation of your website into a process akin to software development&mdash; any budding swe will think that&rsquo;s awesome</p>

<p>As a budding hacker, one way you can learn is by taking things apart and then putting them back together. That is what I will strive to do with Jekyll-Bootsrap.</p>

<p>Jekyll-Bootstrap is the static site generator that I am using to power this blog. It provides a full blog scaffold for Jekyll based blogs. That means I will have ot peer into Jekyll to see what&rsquo;s going on and see if I can recreate my own, customized version of a static site generator.</p>

<p>Another reason I wanted to do this project was that I wanted to explore another way to build a website. There are many ways to go about building a website. You can write HTML manually, use a framework to create dynamic web sites (see my post on web frameworks), or use a full fledged content management system (CMS) that offers an interface to create, edit, review, and publish your content. The Wellesley College website currently uses Drupal as its CMS.</p>

<p>You can also use tools to generate static (instead of a dynamic) website.</p>

<p>What the SSG will do:</p>

<p>Once you have written some input files and created a layout along with rules to specify how files should be compiled, the site generator will do the rest for you. The compiler will take every changed item and produce output by running your specified transformations on the input. It can also be configured to deploy the site for you (heroku, github pages, what have you). An SSG also allows you to run checks on your output&mdash; it can validate the CSS, HTML, find stale files, and find broken links. You can add further checks with a few lines of code.</p>

<p>Goal: the time of routinely writing HTML by hand is OVER. On to the static site generators! It&rsquo;s so much nicer to just write your content in Markdown and let the SSG do the rest for you.</p>

<p>This article still in progress.</p>

<p>Take a look at this for now: <a href="https://github.com/skx/static-site-generators">https://github.com/skx/static-site-generators</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stripe checkout]]></title>
    <link href="http://psoshnin.github.io/blog/2014/05/01/polina-on-rails-stripe-checkout/"/>
    <updated>2014-05-01T23:08:36-04:00</updated>
    <id>http://psoshnin.github.io/blog/2014/05/01/polina-on-rails-stripe-checkout</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a payments site with Rails]]></title>
    <link href="http://psoshnin.github.io/blog/2014/04/22/polina-on-rails-building-a-payments-site/"/>
    <updated>2014-04-22T23:06:50-04:00</updated>
    <id>http://psoshnin.github.io/blog/2014/04/22/polina-on-rails-building-a-payments-site</id>
    <content type="html"><![CDATA[<p>Why is this topic interesting:</p>

<p>Global digital currencies such as Bitcoin are disrupting online commerce and I am predicting that the landscape of digital payments is going to undergo a lot of change in the next decade. A huge portion of the internet is used to pass bits back and forth that represent money in some form and I think it would be really interesting to research what goes on behind the scenes when I buy something online and implement that in my own app.</p>

<p>Why Ruby on Rails and Stripe:</p>

<p>Stripe API is easy to use, well documented, has clear cut pricing, integrates easily into Rails applications, and is arguably the most straightforward way to learn how to handle online payments.</p>

<p>What I will be doing:</p>

<p>I will be making a Ruby on Rails web application that I will host on Heroku and use the Stripe API to process credit card payments. I want to use this app to sell off most of my belongings that I’ve acquired while in college: books, futon, dorm furniture, clothes, etc. I’ll offer visitors an option to pay me in person (via cash/check) or via Stripe/creditcards. Ideally I want to have my site up on a computer with my poster so people can browse my site while I talk about my poster.</p>

<p>02/09/14 Update: I just came back from a conference and they gave us complimentary Square readers. In keeping with the theme of my poster I may incorporate Square on my tablet if I have time.</p>

<p>Building the site:</p>

<p>Security and PCI Compliance
Custom Payment Forms
State and History
Handling Webhooks
Processing Payments with Background Workers
Subscriptions
Marketplaces</p>

<p>Conclusion/Future of online payments</p>

<p>Traditional Credit Card payments redesigned: Stripe/Braintree/PayPal
Cryptocurrencies: Bitcoin/Litecoin/Dogecoin
Payment Platform: Venmo, Square</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[APIs are beautiful things]]></title>
    <link href="http://psoshnin.github.io/blog/2014/04/11/polina-on-rails-apis-are-beautiful-things/"/>
    <updated>2014-04-11T23:02:01-04:00</updated>
    <id>http://psoshnin.github.io/blog/2014/04/11/polina-on-rails-apis-are-beautiful-things</id>
    <content type="html"><![CDATA[<p>APIs are beautiful things</p>

<p><a href="http://blog.mongohq.com/apis-are-beautiful-things/">http://blog.mongohq.com/apis-are-beautiful-things/</a></p>

<p>why api design matters</p>

<p><a href="http://cacm.acm.org/magazines/2009/5/24646-api-design-matters/fulltext">http://cacm.acm.org/magazines/2009/5/24646-api-design-matters/fulltext</a></p>

<p>Notes on web apis
Important component to today&rsquo;s web fabric
Allows websites to utilize certain services very easily
With new products and new ways of doing stuff comes new Apis
Building a great API with the proper design components and documentation so that customers (programmers themselves) can use it is essential. It helps people use your product</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linear Algebra Explained]]></title>
    <link href="http://psoshnin.github.io/blog/2014/04/01/linear-algebra-explained/"/>
    <updated>2014-04-01T22:51:53-04:00</updated>
    <id>http://psoshnin.github.io/blog/2014/04/01/linear-algebra-explained</id>
    <content type="html"><![CDATA[<p><a href="http://cnd.mcgill.ca/~ivan/miniref/linear_algebra_in_4_pages.pdf">http://cnd.mcgill.ca/~ivan/miniref/linear_algebra_in_4_pages.pdf</a></p>

<p>talk about the concept of nonsingularity</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Roulette]]></title>
    <link href="http://psoshnin.github.io/blog/2014/03/26/polina-on-rails-javascript-roulette/"/>
    <updated>2014-03-26T22:47:54-04:00</updated>
    <id>http://psoshnin.github.io/blog/2014/03/26/polina-on-rails-javascript-roulette</id>
    <content type="html"><![CDATA[<p>Client-side frameworks are the way to build rich web apps</p>

<h3>The lowdown on JavaScript Frameworks/Libraries:</h3>

<p>What all of the frameworks agree on:</p>

<p>Serious JS apps require proper data models and ability to do client side rendering, not just server rendering + Ajax/jQuery code</p>

<p>All use the model-view-* separation. There’s some kind of controller piece, but it can depend on the framework.</p>

<p>Data binding = Good
All frameworks except Backbone and Spine have built in declarative data binding in their views</p>

<p>Every single framework is MIT licensed and hosted on GitHub</p>

<p>JS Library vs Framework
Library: can put in your existing architecture and add specific functionality
Framework: give you an architecture (a file structure) that you are meant to follow and are meant to handle common requirements</p>

<p>Libraries don’t make your architecture so deeply tied to the project — they’re typically easier to learn, adopt, customize, and minimize project risk.
Frameworks is a more ambitious take on advancing the craft of JS
Ember JS — creator is also from Rails and SproutCore</p>

<p>Libraries: Backbone, Knockout, Spine, CanJS
Frameworks: Ember, AngularJS, Batman, Meteor</p>

<p>more side by side comparisons here:
<a href="http://blog.stevensanderson.com/2012/08/01/rich-javascript-applications-the-seven-frameworks-throne-of-js-2012/">http://blog.stevensanderson.com/2012/08/01/rich-javascript-applications-the-seven-frameworks-throne-of-js-2012/</a></p>

<p>All of them must make decisions on how to deal with Views, URL Routing, and Data Storage
If one of them is not built in, argument is that it’s easier to work with 3rd party libraries
If one of them is built in, argument is that integration is more seamless.</p>

<p>Ember (like Rails): We do a lot of magic, but it’s good magic.</p>

<p>String-based vs DOM-based templates</p>

<p>AngularJS — made by guys at Google</p>

<p>String-based templates: use Handlebars.js
DOM-based means more control flow via bindings in your markup and not relying on an external templating library</p>

<p>Server-agnosticism
Batman is designed for Rails
Meteor does its own thing</p>

<p>The architecture, convention, and tooling in Ember leans towards Rails developers</p>

<p>Quick overview of the different JS technologies:</p>

<p>Backbone
M-V in JS
Most minimal, best known, easy to adopt</p>

<p>Spine
Modified version of Backbone</p>

<p>Meteor
Bleeding edge future web framework
Very radical
Server-side runtime (Node+Mongo) with client-side runtime. WebSockets syncs between client and server.
Node.js is a framework for server side applications
Mongo is a leading NoSQL open source database
Live deployments each time you edit your code.
Client-side runtimes updated on the fly without losing their state
Beyond conventional web development
Full DB API on the client side—> makes it easier to make dynamic websites
Don’t have to deal with callbacks anymore
An Ecosystem of packages</p>

<p>Internet has latency—> it can take awhile for your DB to update your screen</p>

<p>Ember
Built by guys from jQuery and Rails
What you need to build an “ambitious” web application
Biggest FM in terms of functionality and code size
Very sophisticated, very opinionated
Design inspired by Rails and Cocoa
Will supply project templates for Rails</p>

<p>Sites using this: NPR</p>

<p>AngularJS
Developed by Google, internally used by them
No impact on your server architecture or file layout</p>

<pre><code> Doesn’t need to control the whole page: can work on a section of your page
</code></pre>

<p>Combination of what browsers do today and what they will do natively in a few years</p>

<pre><code> Declarative binding and observability —&gt; in a few years
</code></pre>

<p>Knockout
Model-View-ViewModel
Focused on rich UIs
Not opinionated on URL routing or data access
Won’t impact server architecture or file layout
Doesn’t need to control the whole page</p>

<p>Batman
For people who use Rails and CoffeeScript
Very opinionated, MUST follow conventions
Full-stack framework with pretty rich models, views, controllers, and routing
DOM-based templating</p>

<p>CanJS
Not very well known</p>

<h3>Non-JS Frameworks</h3>

<p>Ahhh there are so many of them! Play? Sinatra? Ruby on Rails? What to learn?</p>

<h3>What to use?</h3>

<p>Which one to choose?
Scope: Are you starting from scratch and want a pre-prepared architecture to guide you?
Or do you prefer to pick your own combinations of patterns and libraries?
Design aesthetic: Do you like doing it?</p>

<h6>#</h6>

<p>client-side frameworks are the way to build rich web apps</p>

<p>What all of the frameworks agree on:</p>

<p>Serious JS apps require proper data models and ability to do client side rendering, not just server rendering + Ajax/jQuery code</p>

<p>All use the model-view-* separation. There’s some kind of controller piece, but it can depend on the framework.</p>

<p>Data binding = Good
All frameworks except Backbone and Spine have built in declarative data binding in their views</p>

<p>Every single framework is MIT licensed and hosted on GitHub</p>

<p>JS Library vs Framework
Library: can put in your existing architecture and add specific functionality
Framework: give you an architecture (a file structure) that you are meant to follow and are meant to handle common requirements</p>

<p>Libraries don’t make your architecture so deeply tied to the project — they’re typically easier to learn, adopt, customize, and minimize project risk.
Frameworks is a more ambitious take on advancing the craft of JS
Ember JS — creator is also from Rails and SproutCore</p>

<p>Libraries: Backbone, Knockout, Spine, CanJS
Frameworks: Ember, AngularJS, Batman, Meteor</p>

<p>more side by side comparisons here:
<a href="http://blog.stevensanderson.com/2012/08/01/rich-javascript-applications-the-seven-frameworks-throne-of-js-2012/">http://blog.stevensanderson.com/2012/08/01/rich-javascript-applications-the-seven-frameworks-throne-of-js-2012/</a></p>

<p>All of them must make decisions on how to deal with Views, URL Routing, and Data Storage
If one of them is not built in, argument is that it’s easier to work with 3rd party libraries
If one of them is built in, argument is that integration is more seamless.</p>

<p>Ember (like Rails): We do a lot of magic, but it’s good magic.</p>

<p>String-based vs DOM-based templates</p>

<p>AngularJS — made by guys at Google</p>

<p>String-based templates: use Handlebars.js
DOM-based means more control flow via bindings in your markup and not relying on an external templating library</p>

<p>Server-agnosticism
Batman is designed for Rails
Meteor does its own thing</p>

<p>The architecture, convention, and tooling in Ember leans towards Rails developers</p>

<p>Quick overview of the different JS technologies:</p>

<p>Backbone
M-V in JS
Most minimal, best known, easy to adopt</p>

<p>Spine
Modified version of Backbone</p>

<p>Meteor
Bleeding edge future web framework
Very radical
Server-side runtime (Node+Mongo) with client-side runtime. WebSockets syncs between client and server.
Node.js is a framework for server side applications
Mongo is a leading NoSQL open source database
Live deployments each time you edit your code.
Client-side runtimes updated on the fly without losing their state
Beyond conventional web development
Full DB API on the client side—> makes it easier to make dynamic websites
Don’t have to deal with callbacks anymore
An Ecosystem of packages</p>

<p>Internet has latency—> it can take awhile for your DB to update your screen</p>

<p>Ember
Built by guys from jQuery and Rails
What you need to build an “ambitious” web application
Biggest FM in terms of functionality and code size
Very sophisticated, very opinionated
Design inspired by Rails and Cocoa
Will supply project templates for Rails</p>

<p>Sites using this: NPR</p>

<p>AngularJS
Developed by Google, internally used by them
No impact on your server architecture or file layout</p>

<pre><code> Doesn’t need to control the whole page: can work on a section of your page
</code></pre>

<p>Combination of what browsers do today and what they will do natively in a few years</p>

<pre><code> Declarative binding and observability —&gt; in a few years
</code></pre>

<p>Knockout
Model-View-ViewModel
Focused on rich UIs
Not opinionated on URL routing or data access
Won’t impact server architecture or file layout
Doesn’t need to control the whole page</p>

<p>Batman
For people who use Rails and CoffeeScript
Very opinionated, MUST follow conventions
Full-stack framework with pretty rich models, views, controllers, and routing
DOM-based templating</p>

<p>CanJS
Not very well known</p>

<p>Which one to choose?
Scope: Are you starting from scratch and want a pre-prepared architecture to guide you?
Or do you prefer to pick your own combinations of patterns and libraries?
Design aesthetic: Do you like doing it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[software architecture primer]]></title>
    <link href="http://psoshnin.github.io/blog/2014/03/20/polina-on-rails-software-architecture/"/>
    <updated>2014-03-20T22:45:56-04:00</updated>
    <id>http://psoshnin.github.io/blog/2014/03/20/polina-on-rails-software-architecture</id>
    <content type="html"><![CDATA[<p>Software Architecture</p>

<p>Stack Overflow architectures:
<a href="http://www.dev-metal.com/architecture-stackoverflow/">http://www.dev-metal.com/architecture-stackoverflow/</a></p>

<p>Three main concepts:</p>

<pre><code> Stakeholders

 Viewpoints

 Perspectives
</code></pre>

<p>Sketch functional structure of system</p>

<pre><code> Start grouping components into processes- where processes will run in data center
 Operations group-- system management components
 Data-- adds main data stores and annotates data flows between key components

 Problems:
      The developers are distracted by operational components; servers, disk arrays
      Worry about the way the app will be deployed to data center
      IT people like the system management software but keep asking questions about the data flows
</code></pre>

<p>Consider the system&rsquo;s architecture through a number of distinct views</p>

<pre><code> Communicate a system in a partitioned fashion
 ex Functional Structure, Information organization, Deployment environment
 Still problem: which views to use and how to create each one
      Solution: use template views (architectural viewpoints)
                Guide to process of developing views that describe architecture
</code></pre>

<p>Two main questions to answer;
1. what a system does?
2. How does it provide its services</p>

<pre><code> How quickly it runs, how secure it is, how available it is, how easy is it to modify, many different nonfunctional factors--&gt; quality properties
</code></pre>

<p>Quality properties&mdash;> cross-cutting concerns</p>

<p>Achieving your quality goals affects all of your different template views</p>

<p>Architectural viewpoint&mdash; addresses the needs and views of stakeholders
Architectural perspective&mdash; addresses performance, security, availability</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Poets and Computer Scientists]]></title>
    <link href="http://psoshnin.github.io/blog/2014/03/15/polina-on-rails-of-a-poet-and-a-computer-scientist/"/>
    <updated>2014-03-15T22:43:32-04:00</updated>
    <id>http://psoshnin.github.io/blog/2014/03/15/polina-on-rails-of-a-poet-and-a-computer-scientist</id>
    <content type="html"><![CDATA[<p>“Before 10 years are over, the Devil’s in it if I have not sucked out some of the life-blood from the mysteries of this universe, in a way that no purely mortal lips or brains could do,” the 19th-century mathematician Ada Byron wrote to computer science pioneer Charles Babbage, with an inkling of the uncanny powers they were beginning to glimpse.</p>

<p>“The Analytical Engine does not occupy common ground with mere ‘calculating machines,’ ” she wrote elsewhere. “It holds a position wholly its own &hellip; A new, a vast, and a powerful language is developed &hellip; in which to wield its truths so that these may become of more speedy and accurate practical application for the purposes of mankind than the means hitherto in our possession have rendered possible. Thus not only the mental and the material, but the theoretical and the practical in the mathematical world, are brought into more intimate and effective connexion with each other.”</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Documentation primer]]></title>
    <link href="http://psoshnin.github.io/blog/2014/03/07/polina-on-rails-documentation-101/"/>
    <updated>2014-03-07T21:40:41-05:00</updated>
    <id>http://psoshnin.github.io/blog/2014/03/07/polina-on-rails-documentation-101</id>
    <content type="html"><![CDATA[<p>how I judge documentation for coding
<a href="http://ericholscher.com/blog/2014/feb/27/how-i-judge-documentation-quality/">http://ericholscher.com/blog/2014/feb/27/how-i-judge-documentation-quality/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git workflow and branching]]></title>
    <link href="http://psoshnin.github.io/blog/2014/02/25/polina-on-rails-gitworkflow-and-branching/"/>
    <updated>2014-02-25T21:35:22-05:00</updated>
    <id>http://psoshnin.github.io/blog/2014/02/25/polina-on-rails-gitworkflow-and-branching</id>
    <content type="html"><![CDATA[<p><a href="http://infinitemonkeys.influitive.com/a-simple-explanation-for-git-rebase/">http://infinitemonkeys.influitive.com/a-simple-explanation-for-git-rebase/</a></p>

<p><a href="http://nvie.com/posts/a-successful-git-branching-model/">http://nvie.com/posts/a-successful-git-branching-model/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A short guide to email spoofing]]></title>
    <link href="http://psoshnin.github.io/blog/2014/02/20/a-short-guide-to-email-spoofing/"/>
    <updated>2014-02-20T00:07:53-05:00</updated>
    <id>http://psoshnin.github.io/blog/2014/02/20/a-short-guide-to-email-spoofing</id>
    <content type="html"><![CDATA[<p>This is a fun trick I learned that uses a few basic networking concepts. I didn&rsquo;t realize how easy it was to send spoof email via command line. Here&rsquo;s how:</p>

<h4>Basic idea:</h4>

<p>Establish a TCP connection to a mail server and use SMTP commands to send email from &ldquo;anyone&rdquo; to &ldquo;anyone&rdquo;. :) You&rsquo;ll see what I mean.</p>

<h4>Concepts:</h4>

<p>TCP, or the Transmission Control Protocol, is a transport layer protocol used for establishing logical communication between applications and different hosts that are not physically connected to one another. Applications can be ones running on your computer (a local host) or the internet (Gmail for example). In this case, I am using TCP to establish a connection from my linux account on a college server to a google mail server. SMTP is the Simple Mail Transfer Protocol that is the de facto standard for sending email across the internet. It&rsquo;s been around since 1982 and is very minimal&mdash; to this day it will only support 7 bit ASCII characters, which amuses me when I think of multimedia email attachments these days. In this example I&rsquo;m going to use telnet to manually send mail through an SMTP mail server.</p>

<h4>Step 1: Establish a TCP Connection</h4>

<p>In order to send SMTP commands to a mail server you need to know the host name of the mail server for your domain. My domain is wellesley.edu, so I&rsquo;m going to first query the DNS for the MX record that holds information about my mail domain.</p>

<p>SSH into my linux account:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -Y psoshnin@cs.wellesley.edu
</span><span class='line'>psoshnin@cs.wellesley.edu's password:
</span><span class='line'>[psoshnin@tempest~] </span></code></pre></td></tr></table></div></figure>


<p>Query DNS for the mail servers that deliver mail to wellesley.edu:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[psoshnin@tempest~] nslookup -type=MX wellesley.edu
</span><span class='line'>Server:           149.130.10.16
</span><span class='line'>Address:      149.130.10.16#53
</span><span class='line'>
</span><span class='line'>wellesley.edu     mail exchanger = 5 ALT2.ASPMX.L.GOOGLE.COM.
</span><span class='line'>wellesley.edu     mail exchanger = 10 ASPMX2.GOOGLEMAIL.COM.
</span><span class='line'>wellesley.edu     mail exchanger = 10 ASPMX3.GOOGLEMAIL.COM.
</span><span class='line'>wellesley.edu     mail exchanger = 1 ASPMX.L.GOOGLE.COM.
</span><span class='line'>wellesley.edu     mail exchanger = 5 ALT1.ASPMX.L.GOOGLE.COM.
</span><span class='line'>
</span><span class='line'>[psoshnin@tempest~]</span></code></pre></td></tr></table></div></figure>


<p>From here you can see that Wellesley has 5 different mail servers through Google mail services. We need to pick one of them&mdash; let&rsquo;s pick ALT2.ASPMX.L.GOOGLE.COM. We use telnet to establish the connection and use port 25 because it&rsquo;s a TCP connection:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[psoshnin@tempest~] telnet ALT2.ASPMX.L.GOOGLE.COM 25
</span><span class='line'>Trying 173.194.65.27...
</span><span class='line'>Connected to ALT2.ASPMX.L.GOOGLE.COM.
</span><span class='line'>Escape character is '^]'.
</span><span class='line'>220 mx.google.com ESMTP u6si42550271een.213 -gsmtp</span></code></pre></td></tr></table></div></figure>


<h4>Step two: Use SMTP commands to send an email</h4>

<p>Yay we&rsquo;re connected! Now here&rsquo;s where the fun begins. Let&rsquo;s enter in some commands to send a message. A basic message for SMTP needs the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MAIL FROM: Sender &lt;sending@email.address&gt;
</span><span class='line'>RCPT TO: Receiver &lt;receiving@email.address&gt;
</span><span class='line'>DATA
</span><span class='line'>FROM: &lt;from@an.address&gt;
</span><span class='line'>T0: &lt;to@an.address&gt;
</span><span class='line'>SUBJECT: email subject
</span><span class='line'>Body of email
</span><span class='line'>.
</span><span class='line'>QUIT</span></code></pre></td></tr></table></div></figure>


<p>Note that there&rsquo;s a period [.] at the end. You will need that. Let&rsquo;s try this!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[psoshnin@tempest~] telnet ALT2.ASPMX.L.GOOGLE.COM 25
</span><span class='line'>Trying 173.194.65.27...
</span><span class='line'>Connected to ALT2.ASPMX.L.GOOGLE.COM.
</span><span class='line'>Escape character is '^]'.
</span><span class='line'>220 mx.google.com ESMTP u6si42550271een.213 -gsmtp
</span><span class='line'>HELO psoshnin@wellesley.edu
</span><span class='line'>250 mx.google.com at your service
</span><span class='line'>MAIL FROM: &lt;god@heaven.onearth&gt;
</span><span class='line'>250 2.1.0 OK u6si4550271een.213 -gsmtp
</span><span class='line'>RCPT TO: &lt;me@polina.io&gt;
</span><span class='line'>250 2.1.0 OK u6si42250271een.213 -gsmtp
</span><span class='line'>DATA
</span><span class='line'>350 Go ahead u6si42550271een.213 -gsmtp
</span><span class='line'>FROM: God &lt;god@heaven.onearth&gt;
</span><span class='line'>TO: Earthling &lt;why@hello.earthling&gt;
</span><span class='line'>SUBJECT: Hello world!
</span><span class='line'>Hello world! I should visit more.
</span><span class='line'>-God
</span><span class='line'>.
</span><span class='line'>250 2.0.0 OK 1392756346 u6si42550271een.213 -gsmtp
</span><span class='line'>QUIT
</span><span class='line'>221 2.0.0 closing connection u6si42550271een.213 -gsmtp
</span><span class='line'>Connection closed by foreign host.
</span><span class='line'>[psoshnin@tempest~] </span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devise and CanCan]]></title>
    <link href="http://psoshnin.github.io/blog/2014/02/07/polina-on-rails-devise-and-cancan/"/>
    <updated>2014-02-07T13:26:15-05:00</updated>
    <id>http://psoshnin.github.io/blog/2014/02/07/polina-on-rails-devise-and-cancan</id>
    <content type="html"><![CDATA[<p>This week I will be talking about making an app that uses Devise for authentication with ActiveRecord and SQLite for a database. I will also be using Test Driven Development (TDD), so I will be including RSpec and Cucumber as well.</p>

<h2>Background:</h2>

<p>Devise is a ready made authentication and user managment gem. RSpec is a popular framework for unit testing and Cucumber is used for integration testing and Behavior Driven Development (BDD). This combination of basic gems is the foundation for lots of real-world Rails applications, which is why I&rsquo;m starting with them. Professional grade applications use TDD and BDD methodologies so I hope as I continue my study of Rails I can incorporate them into my applications and they will be become second nature (hopefully).
The basic function of Devise is to let you sign up a new user and create an account for them to store in your database. Devise will also require a visitor to login before allowing access to an application. RSpec lets you test your code so it won&rsquo;t break after you ship it. Cucumber lets you figure out if the app&rsquo;s specs work as expected. It will test the app from the point of view of the user.</p>

<p>Tips and Tricks I learned this week:</p>

<p>How to create a specific gemset:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm use ruby-2.0.0@rails3-devise-rspec-cucumber --create
</span><span class='line'>$ gem install rails</span></code></pre></td></tr></table></div></figure>


<p>This is very helpful. It will automatically put you in the gemset that belongs to that project.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo "ruby-2.0.0" &gt; .ruby-version
</span><span class='line'>$ echo "rails3-devise-rspec-cucumber" &gt; .ruby-gemset</span></code></pre></td></tr></table></div></figure>


<p>Let me stress that Devise provides <em>authentication</em>. This makes sure that the app securely identifies users and makes sure the user is really who they are. Devise also provides user management and implements features to let the user sign up to create/edit an account.</p>

<p>Devise does not provide <em>authorization</em>. Authorization determines if an authenticated user should have access to the secured resources. Once you&rsquo;ve authenticated a user, you can use CanCan to limit access to users to certain types of content on your site.</p>

<p>CanCan is a popular gem for authorization.</p>

<p>Related apps I&rsquo;ve made:</p>

<ul>
<li><p>An app that uses Devise for authentication with a MongoDB datastore</p>

<ul>
<li>Install Mongo on your computer-> most popular NoSQL db</li>
<li>Use -T and -O to skip Test::Unit and Active::Record files</li>
<li>Use cucumber-rails generator to set up files needed for cucumber</li>
<li>Capybara specifies Capybara instead of default Webrat for acceptance testing</li>
<li>rspec enables RSpec matchers for your step definitions</li>
<li>if you used -o flag, the &mdash;skip-database option allows Cucumber generator to go without a database.ymp file</li>
<li>Need a db cleaner to reset your app db for testing</li>
<li>Check how many instances of mongo are running: ps -ax | grep mongo</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rails generate cucumber:install --capybara --rspec --skip-database</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Polina on Rails: Week One]]></title>
    <link href="http://psoshnin.github.io/blog/2014/02/01/week-one/"/>
    <updated>2014-02-01T17:53:20-05:00</updated>
    <id>http://psoshnin.github.io/blog/2014/02/01/week-one</id>
    <content type="html"><![CDATA[<p>Hello and welcome to my blog! I&rsquo;m designing an independent study this semester so I can devote time to learning the ins and outs of Rails. I&rsquo;m using Octopress, a blogging framework built for <a href="http://jekyllrb.com/">Jekyll</a> which is a static site generator that uses Github <a href="http://pages.github.com/">pages</a>. If you&rsquo;re interested in seeing how I set up this blog, see setting up <a href="http://octopress.org/docs/setup/">Octopress</a>. You can also checkout my source code <a href="https://github.com/psoshnin/psoshnin.github.io/tree/source">here</a> if you want to see how I customized my blog.</p>

<p>To see what fun things I&rsquo;m going to be up to, go to the <a href="http://polina.io/syllabus/">Syllabus</a> tab.</p>

<p>To see what fun projects I&rsquo;ll be working on, I will be designating all of my Github repos with the following naming convention: cs350-week-number-projectname. I&rsquo;ll also be posting notable ones in the <a href="http://polina.io/code/">Code</a> tab.</p>

<p>I&rsquo;m currently based in Boston, so if you&rsquo;re also really excited about learning Rails and want to meet up/learn more feel free to get in touch: me[at]polina[dot]io.</p>

<p>Shortcut to creating posts on octopress:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake new_post["title"]
</span><span class='line'>$ rake new_page[super-awesome]
</span><span class='line'>$ rake new_page[super-awesome/page.html]
</span><span class='line'>
</span><span class='line'>$ rake generate
</span><span class='line'>$ rake deploy
</span><span class='line'>$ rake watch
</span><span class='line'>$ rake preview</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
